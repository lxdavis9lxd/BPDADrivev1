<%- include('layout', { title, user, error, success, body: `
<div class="row">
    <!-- Sidebar -->
    <div class="col-md-3 mb-4">
        <div class="list-group">
            <a href="/explorer" class="list-group-item list-group-item-action active">
                <i class="bi bi-folder"></i> My Files
            </a>
            <a href="/share" class="list-group-item list-group-item-action">
                <i class="bi bi-people"></i> Shared Files
            </a>
            <a href="/trash" class="list-group-item list-group-item-action">
                <i class="bi bi-trash"></i> Trash
            </a>
        </div>
    </div>
    
    <!-- Main content -->
    <div class="col-md-9">
        <div class="row mb-4">
            <div class="col-md-6">
                <h2><i class="bi bi-folder"></i> Explorer</h2>
                ${
                    isSearchResult ? 
                    `<p class="lead">Search results for: "${searchQuery}"</p>` :
                    `<nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/explorer?path=/">Root</a></li>
                            ${
                                currentPath !== '/' ? 
                                currentPath.split('/').filter(Boolean).map((part, index, array) => {
                                    const path = '/' + array.slice(0, index + 1).join('/');
                                    return `<li class="breadcrumb-item ${index === array.length - 1 ? 'active' : ''}">
                                        ${index === array.length - 1 ? part : `<a href="/explorer?path=${path}">${part}</a>`}
                                    </li>`;
                                }).join('') : ''
                            }
                        </ol>
                    </nav>`
                }
            </div>
            <div class="col-md-6 text-md-end">
                <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createFolderModal">
                    <i class="bi bi-folder-plus"></i> New Folder
                </button>
                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createFileModal">
                    <i class="bi bi-file-earmark-plus"></i> New File
                </button>
            </div>
        </div>

<div class="row mb-3">
    <div class="col-12">
        <div class="input-group">
            <input type="text" id="searchInput" class="form-control" placeholder="Search files and folders...">
            <button class="btn btn-outline-secondary" type="button" id="searchButton">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead>
                    <tr>
                        <th scope="col" style="width: 40%">Name</th>
                        <th scope="col" style="width: 15%">Size</th>
                        <th scope="col" style="width: 20%">Created</th>
                        <th scope="col" style="width: 20%">Modified</th>
                        <th scope="col" style="width: 5%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${
                        currentPath !== '/' ? 
                        `<tr>
                            <td colspan="5">
                                <a href="/explorer?path=${
                                    currentPath.split('/').filter(Boolean).slice(0, -1).join('/') || '/'
                                }" class="text-decoration-none">
                                    <i class="bi bi-arrow-up-circle"></i> ..
                                </a>
                            </td>
                        </tr>` : ''
                    }
                    
                    ${
                        directories.length === 0 && files.length === 0 ?
                        '<tr><td colspan="5" class="text-center">No files or folders found</td></tr>' : ''
                    }
                    
                    ${
                        directories.map(dir => `
                            <tr>
                                <td>
                                    <a href="/explorer?path=${currentPath === '/' ? '' : currentPath}/${dir.name}" class="text-decoration-none">
                                        <i class="bi bi-folder-fill text-warning"></i> ${dir.name}
                                    </a>
                                </td>
                                <td>-</td>
                                <td>${dir.formattedCreatedAt}</td>
                                <td>${dir.formattedModifiedAt}</td>
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <button class="dropdown-item rename-item" data-id="${dir.id}" data-name="${dir.name}">
                                                    <i class="bi bi-pencil"></i> Rename
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item delete-item" data-id="${dir.id}" data-name="${dir.name}">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        `).join('')
                    }
                    
                    ${
                        files.map(file => `
                            <tr>
                                <td>
                                    <a href="/editor/${file.id}" class="text-decoration-none">
                                        ${file.isSymlink ? 
                                            `<i class="bi bi-link text-info"></i>` : 
                                            `<i class="bi bi-file-earmark-text text-primary"></i>`
                                        } ${file.name}
                                    </a>
                                </td>
                                <td>${file.formattedSize}</td>
                                <td>${file.formattedCreatedAt}</td>
                                <td>${file.formattedModifiedAt}</td>
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <a class="dropdown-item" href="/editor/${file.id}">
                                                    <i class="bi bi-pencil-square"></i> Edit
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item" href="/share/${file.id}">
                                                    <i class="bi bi-share"></i> Share
                                                </a>
                                            </li>
                                            <li>
                                                <button class="dropdown-item rename-item" data-id="${file.id}" data-name="${file.name}">
                                                    <i class="bi bi-pencil"></i> Rename
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item delete-item" data-id="${file.id}" data-name="${file.name}">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        `).join('')
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="card-footer">
        <div class="row align-items-center">
            <div class="col-md-6">
                <small class="text-muted">
                    Showing ${Math.min(pagination.totalItems, 1)}-${Math.min(pagination.currentPage * pagination.limit, pagination.totalItems)} 
                    of ${pagination.totalItems} items
                </small>
            </div>
            <div class="col-md-6">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-end mb-0">
                        <li class="page-item ${!pagination.hasPrevPage ? 'disabled' : ''}">
                            <a class="page-link" href="${
                                isSearchResult 
                                ? `/explorer?search=${searchQuery}&page=${pagination.currentPage - 1}` 
                                : `/explorer?path=${currentPath}&page=${pagination.currentPage - 1}`
                            }" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        
                        ${(() => {
                            let pageLinks = '';
                            const startPage = Math.max(1, pagination.currentPage - 2);
                            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
                            
                            for (let i = startPage; i <= endPage; i++) {
                                pageLinks += `
                                    <li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                                        <a class="page-link" href="${
                                            isSearchResult 
                                            ? `/explorer?search=${searchQuery}&page=${i}` 
                                            : `/explorer?path=${currentPath}&page=${i}`
                                        }">
                                            ${i}
                                        </a>
                                    </li>
                                `;
                            }
                            
                            return pageLinks;
                        })()}
                        
                        <li class="page-item ${!pagination.hasNextPage ? 'disabled' : ''}">
                            <a class="page-link" href="${
                                isSearchResult 
                                ? `/explorer?search=${searchQuery}&page=${pagination.currentPage + 1}` 
                                : `/explorer?path=${currentPath}&page=${pagination.currentPage + 1}`
                            }" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Create Folder Modal -->
<div class="modal fade" id="createFolderModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-folder-plus"></i> Create New Folder</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createFolderForm">
                    <div class="mb-3">
                        <label for="folderName" class="form-label">Folder Name</label>
                        <input type="text" class="form-control" id="folderName" required>
                    </div>
                    <input type="hidden" id="folderParentPath" value="${currentPath}">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="createFolderBtn">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- Create File Modal -->
<div class="modal fade" id="createFileModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-file-earmark-plus"></i> Create New File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createFileForm">
                    <div class="mb-3">
                        <label for="fileName" class="form-label">File Name</label>
                        <input type="text" class="form-control" id="fileName" required>
                    </div>
                    <input type="hidden" id="fileParentPath" value="${currentPath}">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="createFileBtn">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- Rename Modal -->
<div class="modal fade" id="renameModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-pencil"></i> Rename Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="renameForm">
                    <div class="mb-3">
                        <label for="newItemName" class="form-label">New Name</label>
                        <input type="text" class="form-control" id="newItemName" required>
                    </div>
                    <input type="hidden" id="itemId">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="renameItemBtn">Rename</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-trash"></i> Delete Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <span id="deleteItemName"></span>?</p>
                <p class="text-danger">This action cannot be undone.</p>
                <input type="hidden" id="deleteItemId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="deleteItemBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Create folder
    document.getElementById('createFolderBtn').addEventListener('click', function() {
        const name = document.getElementById('folderName').value;
        const parentPath = document.getElementById('folderParentPath').value;
        
        if (!name) return;
        
        fetch('/explorer/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name,
                type: 'directory',
                parentPath
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to create folder');
        });
    });
    
    // Create file
    document.getElementById('createFileBtn').addEventListener('click', function() {
        const name = document.getElementById('fileName').value;
        const parentPath = document.getElementById('fileParentPath').value;
        
        if (!name) return;
        
        fetch('/explorer/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name,
                type: 'file',
                parentPath
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to create file');
        });
    });
    
    // Rename item
    const renameModal = new bootstrap.Modal(document.getElementById('renameModal'));
    
    document.querySelectorAll('.rename-item').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            const name = this.getAttribute('data-name');
            
            document.getElementById('itemId').value = id;
            document.getElementById('newItemName').value = name;
            
            renameModal.show();
        });
    });
    
    document.getElementById('renameItemBtn').addEventListener('click', function() {
        const id = document.getElementById('itemId').value;
        const newName = document.getElementById('newItemName').value;
        
        if (!id || !newName) return;
        
        fetch(\`/explorer/\${id}/rename\`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ newName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to rename item');
        });
    });
    
    // Delete item
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    
    document.querySelectorAll('.delete-item').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            const name = this.getAttribute('data-name');
            
            document.getElementById('deleteItemId').value = id;
            document.getElementById('deleteItemName').textContent = name;
            
            deleteModal.show();
        });
    });
    
    document.getElementById('deleteItemBtn').addEventListener('click', function() {
        const id = document.getElementById('deleteItemId').value;
        
        if (!id) return;
        
        fetch(\`/explorer/\${id}\`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to delete item');
        });
    });
    
    // Search functionality
    document.getElementById('searchButton').addEventListener('click', function() {
        const query = document.getElementById('searchInput').value;
        
        if (!query) return;
        
        window.location.href = \`/api/search?query=\${encodeURIComponent(query)}\`;
    });
    
    // Allow search on Enter key
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            document.getElementById('searchButton').click();
        }
    });
});
</script>
` }) %>
